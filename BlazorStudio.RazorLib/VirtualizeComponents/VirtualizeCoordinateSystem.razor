@using BlazorStudio.ClassLib.Virtualize
@typeparam T

<div class="bstudio_virtualize-coordinate-system"
     style="@(DimensionsOfCoordinateSystemViewport.DimensionsCssString)"
     id="@ComponentId"
     @onscroll="OnScroll">

    @{
        // Create a local reference to avoid a new instance being set while rendering.
        var localMostRecentMessage = VirtualizeCoordinateSystemMessage;

        @if (MarkerRenderFragment is not null)
        {
            @MarkerRenderFragment
        }

        var request = localMostRecentMessage?.VirtualizeCoordinateSystemRequest;

        VirtualizeCoordinateSystemResult<T>? result;

        if (localMostRecentMessage?.VirtualizeCoordinateSystemResult is null)
        {
            result = null;
        }
        else
        {
            result = (VirtualizeCoordinateSystemResult<T>?) localMostRecentMessage?.VirtualizeCoordinateSystemResult;
        }

        var leftStyle = GetLeftBoundaryCssString(request, result);
        var rightStyle = GetRightBoundaryCssString(request, result);
        var topStyle = GetTopBoundaryCssString(request, result);
        var bottomStyle = GetBottomBoundaryCssString(request, result);
        var contentStyle = GetContentCssString(request, result);

        <div id="@_leftElementId"
             class="bstudio_virtualize-coordinate-system-boundary"
             style="position: absolute; @leftStyle">
        </div>

        <div id="@_rightElementId"
             class="bstudio_virtualize-coordinate-system-boundary"
             style="position: absolute; @rightStyle">
        </div>

        <div id="@_topElementId"
             class="bstudio_virtualize-coordinate-system-boundary"
             style="position: absolute; @topStyle">
        </div>

        <div id="@_bottomElementId"
             class="bstudio_virtualize-coordinate-system-boundary"
             style="position: absolute; @bottomStyle">
        </div>

        <div style="position: absolute; @contentStyle" class="@ContentWrapperCssClass">
            
            @if (result?.ItemsWithType?.Any() ?? false)
            {
                foreach (var item in result.ItemsWithType)
                {
                    @ItemRenderFragment(item)
                }
            }
        </div>
    }
</div>
