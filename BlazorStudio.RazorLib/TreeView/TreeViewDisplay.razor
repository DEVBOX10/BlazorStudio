@typeparam T
@using BlazorStudio.ClassLib.Store.TreeViewCase

<div class="bstudio_tree-view-display">
    
    <span @ref="_titleSpan"
          class="bstudio_tree-view-display-title @IsActiveStyling"
          style="padding-left: @(GetScaledByDepthPixelsOffset(Depth));"
          tabindex='@(IsActive ? "0" : "-1")'
          @onclick="SetIsActiveOnClick"
          @onkeydown="HandleOnKeyDown">
        
        <span @onclick="ToggleIsExpandedOnClick"
              @onclick:stopPropagation="true">
            @if (TreeView.IsExpanded)
            {
                <IconChevronDown />
            }
            else
            {
                <IconChevronRight />
            }
        </span>

        @ChildContent(TreeView.Item)
    </span>

    <div class="bstudio_tree-view-display-body">
        <div class="bstudio_tree-view-display-body-border"
             style="left: @GetScaledByDepthPixelsOffset(Depth + 1)">
        </div>
        @if (TreeView.IsExpanded)
        {
            @if (_isGettingChildren)
            {
                <span>Loading...</span>
            }
            else
            {
                <CascadingValue Name="Depth" Value="Depth + 1">
                    @for (int i = 0; i < TreeView.Children.Length; i++)
                    {
                        int index = i;
                        var child = (TreeView<T>) TreeView.Children[i];

                        <TreeViewDisplay TreeView="child"
                                         GetSiblingsAndSelfFunc="() => TreeView.Children"
                                         IndexAmongSiblings="index"
                                         Parent="TreeView"/>
                    }
                </CascadingValue>
            }
        }
    </div>
</div>
