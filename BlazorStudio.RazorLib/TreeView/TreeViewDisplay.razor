@typeparam T
@using BlazorStudio.ClassLib.Store.TreeViewCase

<div class="bstudio_tree-view-display">
    
    <span class="bstudio_tree-view-display-title"
          style="padding-left: @(GetScaledByDepthPixelsOffset(Depth)); @GetIsActiveStyling"
          @onclick="SetIsActiveOnClick">
        
        <span @onclick="ToggleIsExpandedOnClick"
              @onclick:stopPropagation="true">
            @if (TreeView.IsExpanded)
            {
                <IconChevronDown />
            }
            else
            {
                <IconChevronRight />
            }
        </span>

        @ChildContent(TreeView.Item)
    </span>

    <div class="bstudio_tree-view-display-body">
        <div class="bstudio_tree-view-display-body-border"
             style="left: @GetScaledByDepthPixelsOffset(Depth + 1)">
        </div>
        @if (TreeView.IsExpanded)
        {
            <CascadingValue Name="Depth" Value="Depth + 1">
                @foreach (var item in TreeView.Children)
                {
                    <TreeViewDisplay TreeView="(TreeView<T>) item"/>
                }
            </CascadingValue>
        }
    </div>
</div>
