@using BlazorStudio.ClassLib.Store.TreeViewCase
@typeparam T

<div class="bstudio_tree-view-display">

    <span @ref="_titleSpan"
          class="bstudio_tree-view-display-title pte_unselectable @IsActiveStyling"
          style="padding-left: calc(@(GetScaledByDepthPixelsOffset(Depth)) + 5px);"
          tabindex='@(IsActive ? "0" : "-1")'
          @oncustomkeydown="HandleCustomOnKeyDown"
          @onclick:stopPropagation="true"
          @onclick="SetIsActiveOnClick"
          @ondblclick:stopPropagation="true"
          @ondblclick="HandleOnDoubleClick"
          @oncontextmenu="HandleOnContextMenu"
          @oncontextmenu:preventDefault="true">

        @if (IsExpandable(TreeView.Item))
        {
            <span @onclick="ToggleIsExpandedOnClick"
                  @onclick:stopPropagation="true"
                  @ondblclick:stopPropagation="true"
                  class="bstudio_expansion-chevron">
                @if (TreeView.IsExpanded)
                {
                    <IconChevronDown/>
                }
                else
                {
                    <IconChevronRight/>
                }
            </span>
        }
        else
        {
            <IconBlank/>
        }

        @ChildContent(TreeView.Item)
    </span>

    <div class="bstudio_tree-view-display-body">
        <DropdownDisplay Dimensions="_fileDropdownDimensions"
                         DropdownKey="_fileDropdownKey">

            @if (OnContextMenuRenderFragment is not null)
            {
                var contextMenuEventDto = new TreeViewContextMenuEventDto<T>(_mostRecentMouseEventArgs,
                    null,
                    TreeView.Item,
                    ToggleIsExpandedOnClick,
                    DispatchSetSelfAsActiveTreeView,
                    RefreshTreeViewTargetAsync,
                    RefreshParentOfTreeViewTargetAsync,
                    _titleSpan);

                @OnContextMenuRenderFragment(contextMenuEventDto)
            }

        </DropdownDisplay>

        @{
            var paddingLeftFromTreeDepth = GetScaledByDepthPixelsOffset(Depth + 1);

            <div class="bstudio_tree-view-display-body-border"
                 style="left: @paddingLeftFromTreeDepth">
            </div>

            @if (TreeView.IsExpanded)
            {
                @if (_isGettingChildren)
                {
                    <span>Loading...</span>
                }
                else if (_toggleIsExpandedOnClickRichErrorModel is not null)
                {
                    <div class="bstudio_tree-view-display-title"
                         style="padding-left: calc(@paddingLeftFromTreeDepth + 5px);">

                        <RichErrorDisplay RichErrorModel="_toggleIsExpandedOnClickRichErrorModel"/>
                    </div>
                }
                else
                {
                    <CascadingValue Name="Depth" Value="Depth + 1">
                        @for (var i = 0; i < TreeView.Children.Length; i++)
                        {
                            var index = i;
                            var child = (TreeView<T>)TreeView.Children[i];

                            <TreeViewDisplay @key="child.Key"
                                             TreeView="child"
                                             GetSiblingsAndSelfFunc="() => TreeView.Children"
                                             IndexAmongSiblings="index"
                                             Parent="this"/>
                        }
                    </CascadingValue>
                }
            }
        }
    </div>
</div>