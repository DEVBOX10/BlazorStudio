@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BlazorStudio.ClassLib.Store.TreeViewCase
@typeparam T

<div class="bstudio_tree-view-wrap-display">

    @if (TreeViewWrapStateSelection.Value is null)
    {
        <div>TreeViewWrap is Loading...</div>
    }
    else
    {
        var rootTreeViews = TreeViewWrapStateSelection.Value.RootTreeViews.ToArray();

        if (rootTreeViews?.Any() ?? false)
        {
            <CascadingValue Value="GetChildrenFunc">
                <CascadingValue Value="ChildContent">
                    <CascadingValue Name="Depth" Value="0">
                        <CascadingValue Name="OnEnterKeyDown" Value="OnEnterKeyDown">
                            <CascadingValue Name="OnSpaceKeyDown" Value="OnSpaceKeyDown">
                                <CascadingValue Name="IsExpandable" Value="IsExpandable">
                                    <CascadingValue Value="TreeViewWrapKey">
                                    
                                        @for (int i = 0; i < rootTreeViews.Length; i++)
                                        {
                                            int index = i;
                                            var child = (TreeView<T>) rootTreeViews[i];

                                            <TreeViewDisplay TreeView="child"
                                                             GetSiblingsAndSelfFunc="() => rootTreeViews"
                                                             IndexAmongSiblings="index"
                                                             Parent="null"/>
                                        }
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        }
    }
</div>
