@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BlazorStudio.ClassLib.Store.TreeViewCase
@using System.Collections.Immutable
@typeparam T

<div class="bstudio_tree-view-wrap-display" style="@StyleString">

    @if (TreeViewWrapStateSelection.Value is null)
    {
        <div>TreeViewWrap is Loading...</div>
    }
    else
    {
        var rootTreeViews = TreeViewWrapStateSelection.Value.RootTreeViews.ToArray();
        var activeItems = TreeViewWrapStateSelection.Value.ActiveTreeViews
            .Select(x => (T)x.ItemUntyped)
            .ToImmutableArray();

        if (HeaderRenderFragment is not null)
        {
            @HeaderRenderFragment(activeItems)
        }

        if (rootTreeViews?.Any() ?? false)
        {
            <CascadingValue Name="ReloadRoot" Value="new Func<Task>(async () => Reload())">
                <CascadingValue Value="GetChildrenFunc">
                    <CascadingValue Value="ItemRenderFragment">
                        <CascadingValue Name="Depth" Value="0">
                            <CascadingValue Name="OnEnterKeyDown" Value="OnEnterKeyDown">
                                <CascadingValue Name="OnSpaceKeyDown" Value="OnSpaceKeyDown">
                                    <CascadingValue Name="OnDoubleClick" Value="OnDoubleClick">
                                        <CascadingValue Value="TreeViewWrapKey">
                                            <CascadingValue Name="OnContextMenuRenderFragment" Value="OnContextMenuRenderFragment">
                                                <CascadingValue Name="IsExpandable" Value="IsExpandable">
                                                    <CascadingValue Value="TreeViewWrapKey">
                                                        <div class="@BodyCssClassAttribute">
                                                            @for (var i = 0; i < rootTreeViews.Length; i++)
                                                            {
                                                                var index = i;
                                                                var child = (TreeView<T>)rootTreeViews[i];

                                                                <TreeViewDisplay @key="child.Key"
                                                                                 TreeView="child"
                                                                                 GetSiblingsAndSelfFunc="() => rootTreeViews"
                                                                                 IndexAmongSiblings="index"
                                                                                 Parent="null"/>
                                                            }
                                                        </div>
                                                    </CascadingValue>
                                                </CascadingValue>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        }

        if (FooterRenderFragment is not null)
        {
            @FooterRenderFragment(activeItems)
        }
    }
</div>