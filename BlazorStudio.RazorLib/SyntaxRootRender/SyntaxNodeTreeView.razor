@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis
<div class="bstudio_syntax-node-tree-view">
    <h5>
        <em>@@SyntaxNode.ToFullString()</em>
    </h5>

    <ExpansionDisplay>
        <TitleRenderFragment>
            Change&nbsp;font size:<em>@(_preFontSize)px;</em>
        </TitleRenderFragment>

        <BodyRenderFragment>
            <input type="number"
                   @bind="_preFontSize"
                   @bind:event="oninput"
                   class="bstudio_input bstudio_input-number"/>
        </BodyRenderFragment>
    </ExpansionDisplay>

    <div style="overflow: auto; @_toFullStringDimensions.DimensionsCssString">

        <pre style="font-size: @(_preFontSize)px; border-top: 1px solid var(--bstudio_primary-border-color);">
@SyntaxNode.ToFullString()
</pre>
    </div>

    <BlazorStudio.RazorLib.Transformable.TransformableRowSeparator TopDimensions="_toFullStringDimensions"
                                                                   BottomDimensions="_anotherDimensions"
                                                                   ReRenderFunc="ReRender"/>

    <div style="overflow: auto; @_anotherDimensions.DimensionsCssString">
        <TreeViewWrapDisplay ShouldDispose="false"
                             TreeViewWrapKey="_syntaxNodeTreeViewKey"
                             RootItems="GetRoot()"
                             GetChildrenFunc="LoadSyntaxTreeViewWrapperChildren"
                             OnEnterKeyDown="SyntaxTreeViewOnEnterKeyDown"
                             OnSpaceKeyDown="ThemeTreeViewOnSpaceKeyDown"
                             OnDoubleClick="SyntaxTreeViewOnDoubleClick"
                             IsExpandable="syntaxWrap => syntaxWrap.SyntaxTreeViewWrapperKind == SyntaxTreeViewWrapperKind.SyntaxNode">

            <ItemRenderFragment Context="syntaxWrap">
                @{
                    switch (syntaxWrap.SyntaxTreeViewWrapperKind)
                    {
                        case SyntaxTreeViewWrapperKind.SyntaxNode:
                            var syntaxNode = (SyntaxNode)syntaxWrap.Item;

                            <span title="@syntaxNode.ToFullString()" style="height: 100%; display: inline-flex;">
                                <span>
                                    @syntaxNode.Kind()
                                </span>
                                :&nbsp;
                                <span class="@GetSyntaxHighlightingCssClassForNode(syntaxWrap)" style="overflow:hidden; white-space:nowrap; display:inline-block; text-overflow: ellipsis; max-width: 420px;">
                                    @syntaxNode.ToFullString()
                                </span>
                            </span>

                            break;
                        case SyntaxTreeViewWrapperKind.SyntaxToken:
                            var syntaxToken = (SyntaxToken)syntaxWrap.Item;

                            <span title="@syntaxToken.ToFullString()" style="height: 100%; display: inline-flex;">
                                <span>
                                    @syntaxToken.Kind()
                                </span>
                                :&nbsp;
                                <span class="@GetSyntaxHighlightingCssClassForToken(syntaxWrap)" style="overflow:hidden; white-space:nowrap; display:inline-block; text-overflow: ellipsis; max-width: 420px;">
                                    @syntaxToken.ToFullString()
                                </span>
                            </span>

                            break;
                    }
                }
            </ItemRenderFragment>
        </TreeViewWrapDisplay>
    </div>
</div>