@using BlazorStudio.ClassLib.TextEditor.IndexWrappers
@using System.Text
@using BlazorStudio.ClassLib.Keyboard
@using BlazorStudio.ClassLib.TextEditor.Enums
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using BlazorStudio.RazorLib.CustomEvents

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<ShouldRenderBoundary ShouldRenderFunc="ShouldRenderFunc">
    <TextEditorDebugInfo TextEditor="TextEditorStatesSelection.Value"
                         TextPartition="_textPartition"/>

    <button @onclick="ApplyRoslynSyntaxHighlightingAsyncOnClick"
            class="btn btn-primary">
        Apply Roslyn Syntax Highlighting
    </button>

    <div class="pte_plain-text-editor-wrapping">
        <div class="pte_plain-text-editor-display"
             id="@GetTextEditorElementId"
             style="font-size: 24px;"
             @onkeydown="HandleOnKeyDown"
             @onkeydown:preventDefault="true"
             @oncustomclick="HandleOnCustomClick">

            <div id="@GetMeasureFontSizeElementId" 
                 class="bstudio_measure-font-size">
                @for (int i = 0; i < _fontSizeMeasurementMultiplier; i++)
                {
                    <text>@_fontSizeMeasurementTestData</text>
                }
            </div>

            @if (_textEditorFontSize is not null) 
            {
                var localTextEditorState = TextEditorStatesSelection.Value;
        
                <Virtualize ItemsProvider="LoadTextCharacterSpans"
                            Context="textSpan"
                            @ref="_virtualize">

                    <div style="white-space: nowrap; height: @(_textEditorFontSize.RowHeight)px;">
                        @if (textSpan.TextCharacters.Any())
                        {
                            var spanTextBuilder = new StringBuilder();
                            var currentDecorationByte = textSpan.TextCharacters
                                .First().DecorationByte;

                            foreach (var textCharacter in textSpan.TextCharacters)
                            {
                                if (currentDecorationByte == textCharacter.DecorationByte)
                                {
                                    if (textCharacter.Value == '\t')
                                    {
                                        // spanTextBuilder.Append("&nbsp;&nbsp;&nbsp;&nbsp;");
                                        spanTextBuilder.Append("~~~~");
                                    }
                                    else if (textCharacter.Value == ' ')
                                    {
                                        spanTextBuilder.Append("&nbsp;");
                                        // spanTextBuilder.Append("`");
                                    }
                                    else if (textCharacter.Value == '\r')
                                    {
                                        // spanTextBuilder.Append('/');
                                    }
                                    else if (textCharacter.Value == '\n')
                                    {
                                        // spanTextBuilder.Append('\\');
                                    }
                                    else
                                    {
                                        spanTextBuilder.Append(textCharacter.Value);
                                    }
                                }
                                else
                                {
                                    <span class="@DecorationKindHelper.ToDecorationKindCssStyleString(currentDecorationByte)">
                                        @((MarkupString)spanTextBuilder.ToString())
                                    </span>

                                    spanTextBuilder.Clear();

                                    currentDecorationByte = textCharacter.DecorationByte;
                                    spanTextBuilder.Append(textCharacter.Value);
                                }
                            }

                            @* Render out the last <span> *@
                            if (spanTextBuilder.Length > 0)
                            {
                                <span class="@DecorationKindHelper.ToDecorationKindCssStyleString(currentDecorationByte)">
                                    @((MarkupString)spanTextBuilder.ToString())
                                </span>
                            }
                        }
                    </div>
                </Virtualize>

                <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                         TextCursor="_cursor"
                                         TextEditorBase="localTextEditorState"
                                         RowHeightInPixels="_textEditorFontSize?.RowHeight ?? 0"
                                         CharacterWidthInPixels="_textEditorFontSize?.CharacterWidth ?? 0" />
            }
        </div>
    </div>
</ShouldRenderBoundary>