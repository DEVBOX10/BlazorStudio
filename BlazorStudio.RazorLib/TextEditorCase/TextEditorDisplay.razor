@using BlazorStudio.ClassLib.TextEditor.IndexWrappers
@using System.Text
@using BlazorStudio.ClassLib.Keyboard
@using BlazorStudio.ClassLib.TextEditor.Enums
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using BlazorStudio.ClassLib.CustomEvents
@using BlazorStudio.ClassLib.Html

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div style="height: 100%; font-size: @(GetFontSize);">
    <ShouldRenderBoundary ShouldRenderFunc="ShouldRenderFunc">
        <button @onclick="ApplyRoslynSyntaxHighlightingAsyncOnClick"
                class="btn btn-primary">
            Apply Roslyn Syntax Highlighting
        </button>

        <div class="pte_plain-text-editor-wrapping">
            <div class="pte_plain-text-editor-display pte_unselectable"
                 id="@GetTextEditorElementId"
                 @onkeydown="HandleOnKeyDown"
                 @onkeydown:preventDefault="true"
                 @oncustomclick="HandleOnCustomClick">

                <div id="@GetMeasureFontSizeElementId" 
                     class="bstudio_measure-font-size">
                    @for (int i = 0; i < _fontSizeMeasurementMultiplier; i++)
                    {
                        <text>@_fontSizeMeasurementTestData</text>
                    }
                </div>

                @if (_textEditorFontSize is not null) 
                {
                    var localTextEditorState = TextEditorStatesSelection.Value;
            
                    <Virtualize ItemsProvider="LoadTextCharacterSpans"
                                Context="textSpan"
                                @ref="_virtualize">
                        
                        <div style="white-space: nowrap; position: absolute; @GetLineNumberDimensions(textSpan, _textEditorFontSize, localTextEditorState)">
                            @textSpan.RowIndex
                        </div>
                        
                        <div style="white-space: nowrap; position: absolute; @GetTextSpanDimensions(textSpan, _textEditorFontSize, localTextEditorState)">
                            @if (textSpan.TextCharacters.Any())
                            {
                                var spanTextBuilder = new StringBuilder();
                                var currentDecorationByte = textSpan.TextCharacters
                                    .First().DecorationByte;

                                foreach (var textCharacter in textSpan.TextCharacters)
                                {
                                    if (currentDecorationByte == textCharacter.DecorationByte)
                                    {
                                        switch (textCharacter.Value)
                                        {
                                            case '\t':
                                                spanTextBuilder.Append("&nbsp;&nbsp;&nbsp;&nbsp;");
                                                break;
                                            case ' ':
                                                spanTextBuilder.Append("&nbsp;");
                                                break;
                                            case '\r':
                                                break;
                                            case '\n':
                                                break;
                                            case '<':
                                                spanTextBuilder.Append("&lt;");
                                                break;
                                            case '>':
                                                spanTextBuilder.Append("&gt;");
                                                break;
                                            case '"':
                                                spanTextBuilder.Append("&quot;");
                                                break;
                                            case '\'':
                                                spanTextBuilder.Append("&#39;");
                                                break;
                                            case '&':
                                                spanTextBuilder.Append("&amp;");
                                                break;
                                            default:
                                                spanTextBuilder.Append(textCharacter.Value);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        <span class="@DecorationKindHelper.ToDecorationKindCssStyleString(currentDecorationByte)">
                                            @((MarkupString)spanTextBuilder.ToString())
                                        </span>

                                        spanTextBuilder.Clear();

                                        currentDecorationByte = textCharacter.DecorationByte;
                                        spanTextBuilder.Append(textCharacter.Value);
                                    }
                                }

                                @* Render out the last <span> *@
                                if (spanTextBuilder.Length > 0)
                                {
                                    <span class="@DecorationKindHelper.ToDecorationKindCssStyleString(currentDecorationByte)">
                                        @((MarkupString)spanTextBuilder.ToString())
                                    </span>
                                }
                            }
                        </div>
                    </Virtualize>

                    <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                             TextCursor="_cursor"
                                             TextEditorBase="localTextEditorState"
                                             RowHeightInPixels="_textEditorFontSize?.RowHeight ?? 0"
                                             CharacterWidthInPixels="_textEditorFontSize?.CharacterWidth ?? 0" />
                }
            </div>
        </div>
    </ShouldRenderBoundary>
</div>
