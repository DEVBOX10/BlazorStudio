@using BlazorStudio.ClassLib.Store.PlainTextEditorCase
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div id="@IsActiveRowId"
     class="pte_plain-text-editor-row-display @IsActiveCss"
     @onclick="DispatchPlainTextEditorOnClickAction">
    <PlainTextEditorLineNumberDisplay MostDigitsInARowNumber="MostDigitsInARowNumber" />
    
    <CascadingValue Name="NotifyCharacterWasClicked" Value="new Action(() => _characterWasClicked = true)">
        <div class="pte_plain-text-editor-row-display-body"
             style="@WidthStyleCss">

            @{
                // Ensure reference to PlainTextEditorRow does
                // not change while looping over tokens
                // by making a local reference to it.
                var currentPlainTextEditorRow = PlainTextEditorRow;
                var runningTotalOfCharacters = 0;

                for (int i = 0; i < currentPlainTextEditorRow.Tokens.Count; i++)
                {
                    var tokenIndex = i;

                    var token = currentPlainTextEditorRow.Tokens[tokenIndex];

                    var localRunningTotalOfCharacters = runningTotalOfCharacters;
                    
                    // This if statement is a bit hacky by checking copy text for "\t" character.
                    // WhitespaceTextToken is a private type so I cannot check the WhitespaceKind without
                    // making changes and I don't want to get distracted down a possible rabbit hole right now.
                    if (token.Kind == TextTokenKind.Whitespace &&
                        token.CopyText == "\t")
                    {
                        // Do not map roslyn character indices with '\t' representing 4 spaces.
                        runningTotalOfCharacters += token.CopyText.Length;
                    }
                    else
                    {
                        runningTotalOfCharacters += token.PlainText.Length;
                    }
                    
                    <CascadingValue Name="TokenIndex" Value="tokenIndex">
                        <TextTokenDisplay @key="token.Key"
                                          TextToken="token"
                                          StartOfSpanRelativeToRow="localRunningTotalOfCharacters"
                                          StartOfRowSpanRelativeToDocument="VirtualCharacterIndexMarkerForStartOfARow[RowIndex]"/>
                    </CascadingValue>
                }
            }
        </div>
    </CascadingValue>
</div>
