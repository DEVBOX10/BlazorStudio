@using Fluxor.Blazor.Web.Components
@using BlazorStudio.ClassLib.Store.PlainTextEditorCase
@using System.Diagnostics.CodeAnalysis
@using BlazorStudio.ClassLib.Contexts
@using BlazorStudio.ClassLib.Sequence
@using BlazorStudio.RazorLib.VirtualizeComponentExperiments
@inherits FluxorComponent

@if (PlainTextEditorSelector.Value is null)
{
    @* This div should never display *@
    <div>The PlainTextEditor; something went wrong.</div>
}
else
{
    // Ensure reference to PlainTextEditorSelector does
    // not change while looping over rows
    // by making a local reference to it.
    var currentPlainTextEditor = PlainTextEditorSelector.Value;

    @* ContextBoundary to allow for specific PlainTextEditor keymappings *@
    <ContextBoundary CssClassString="pte_plain-text-editor-wrapping"
                     ContextKey="ContextFacts.PlainTextEditorContext.ContextKey">

        @* 'hide' all end user information displayed in this component to ease reading of this file. *@
        <PlainTextEditorHeader PlainTextEditor="currentPlainTextEditor"
                               WidthAndHeightTestResult="_widthAndHeightTestResult"/>

        <div id="@PlainTextEditorDisplayId"
             class="pte_plain-text-editor-display pte_unselectable @IsFocusedCssClass"
             style="@GetStyleCss()"
             tabindex="@TabIndex"
             @ref="_plainTextEditor"
             @onclick="FocusPlainTextEditorOnClick"
             @onkeydown:preventDefault="true"
             @onmousedown="StartSelectingText"
             @onmouseup="StopSelectingText"
             @onkeydown="OnKeyDown"
             @onfocusin="OnFocusIn"
             @onfocusout="OnFocusOut"
             @onscroll="StopSelectingText">

            @{
                var mostDigitsInARowNumber = currentPlainTextEditor.FileHandle.VirtualRowCount.ToString().Length;

                @* 'hide' all the 'deconstructed' CascadingValues from currentPlainTextEditor *@
                <PlainTextEditorCascadingValues PlainTextEditor="currentPlainTextEditor">
                    @* CascadingValues NOT from currentPlainTextEditor follow *@
                    <CascadingValue Value="_isFocused">
                        <CascadingValue Name="ActiveRowId" Value="ActiveRowId">
                            <CascadingValue Name="FocusPlainTextEditor" Value="new Action(FocusPlainTextEditor)">
                                @if (_isInitialized)
                                {
                                    @* Cursor uses css style "position: absolute" and calculates position *@
                                    <PlainTextEditorCursorDisplay MostDigitsInARowNumber="mostDigitsInARowNumber" />
                                    
                                    @* Render the 'entire' file with Virtualization techniques *@
                                    <VirtualizeCoordinateSystemExperimental @ref="_virtualizeCoordinateSystemExperimental"
                                                                            TItem="(int Index, IPlainTextEditorRow PlainTextEditorRow)"
                                                                            Context="rowTuple"
                                                                            OverscanCount="6"
                                                                            Items="GetItems(currentPlainTextEditor)"
                                                                            ItemsSequenceKey="SequenceKey.NewSequenceKey()">
                            
                                        @* ChildContent RenderFragment is foreach row *@
                                        <CascadingValue Name="RowIndex" Value="rowTuple.Index">
                                            <PlainTextEditorRowDisplay @key="rowTuple.PlainTextEditorRow.Key"
                                                                       PlainTextEditorRow="rowTuple.PlainTextEditorRow"
                                                                       MostDigitsInARowNumber="mostDigitsInARowNumber"/>
                                        </CascadingValue>
                                    </VirtualizeCoordinateSystemExperimental>
                                }
                                else
                                {
                                    @* 
                                        If the 'height of a row', or 'width of a character' are unknown
                                        then render a single row containing a single character
                                        and then use JavaScript to measure the dimensions. 
                                    *@
                                    var testRow = currentPlainTextEditor.GetWidthAndHeightTestPlainTextEditorRow();
                                    <CascadingValue Name="RowIndex" Value="0">
                                        <CascadingValue Name="GetWidthAndHeightTest" Value="true">

                                            @* 
                                                The single row and single character are rendered within a
                                                hidden div with css: 'position: absolute' so the end user
                                                does not notice measurements being taken. 
                                            *@
                                            <div style="position: absolute; left: 0; top: 0; visibility: hidden;">
                                                <PlainTextEditorRowDisplay @key="testRow.Key"
                                                                           PlainTextEditorRow="testRow"
                                                                           MostDigitsInARowNumber="mostDigitsInARowNumber"
                                                                           WidthAndHeightTestId="@_widthAndHeightTestId"/>
                                            </div>


                                        </CascadingValue>
                                    </CascadingValue>
                                }
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </PlainTextEditorCascadingValues>
            }
        </div>
        
        @* Render Footer for miscellaneous information about the Editor to be displayed to the end user *@
        <PlainTextEditorFooter PlainTextEditor="currentPlainTextEditor"/>
    </ContextBoundary>
}