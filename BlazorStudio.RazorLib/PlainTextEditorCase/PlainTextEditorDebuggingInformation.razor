@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorStudio.RazorLib.DebuggingHelp

<div class="bstudio_debug-info">
    
    <div>PlainTextEditorKind: @PlainTextEditor.PlainTextEditorKind</div>
    
    <div>
        @if (WidthAndHeightTestResult is null)
        {
            <div>
                WidthAndHeightTestResult is null
            </div>
        }
        else
        {
            <div>
                WidthAndHeightTestResult:

                <div>
                    WidthOfACharacter:
                    &nbsp;
                    @WidthAndHeightTestResult.WidthOfACharacter
                </div>
                
                <div>
                    HeightOfARow:
                    &nbsp;
                    @WidthAndHeightTestResult.HeightOfARow
                </div>
            </div>
        }
    </div>
    
    <DebugExpansion Title="Solution">
            @if (SolutionStateWrap is not null)
            {
                var currentSolutionState = SolutionStateWrap.Value;

                <div>
                    @foreach (var documentPair in currentSolutionState.FileDocumentMap)
                    {
                        <DebugExpansion Title="@documentPair.Key.AbsoluteFilePathString">
                            <DebugExpansion Title="PropertyDeclarations">
                                @foreach (var propertyDeclaration in documentPair.Value.GeneralSyntaxCollector.PropertyDeclaration)
                                {
                                    <DebugExpansion Title="@propertyDeclaration.GetText().ToString()">
                                        <DebugExpansion Title="Type">
                                            <div>Type.GetText():&nbsp;@propertyDeclaration.Type.GetText().ToString()</div>
                                            <div>Type.GetText().Length:&nbsp;@propertyDeclaration.Type.GetText().ToString().Length</div>
                                            <div>Type span start:&nbsp;@propertyDeclaration.Type.Span.Start</div>
                                            <div>Type span end:&nbsp;@propertyDeclaration.Type.Span.End</div>    
                                            <div>end - start:&nbsp;@(propertyDeclaration.Type.Span.End - propertyDeclaration.Type.Span.Start)</div>    
                                        </DebugExpansion>
                                    </DebugExpansion>
                                }
                            </DebugExpansion>
                            
                            <DebugExpansion Title="MethodDeclarations">
                                @foreach (var methodDeclaration in documentPair.Value.GeneralSyntaxCollector.MethodDeclaration)
                                {
                                    <DebugExpansion Title="@methodDeclaration.GetText().ToString()">
                                        <DebugExpansion Title="Type">
                                            <div>Identifier.Text:&nbsp;@methodDeclaration.Identifier.Text</div>
                                            <div>Identifier.Text.Length:&nbsp;@methodDeclaration.Identifier.Text.Length</div>
                                            <div>Identifier span start:&nbsp;@methodDeclaration.Identifier.Span.Start</div>
                                            <div>Identifier span end:&nbsp;@methodDeclaration.Identifier.Span.End</div>    
                                            <div>end - start:&nbsp;@(methodDeclaration.Identifier.Span.End - methodDeclaration.Identifier.Span.Start)</div>    
                                        </DebugExpansion>
                                    </DebugExpansion>
                                }
                            </DebugExpansion>
                        </DebugExpansion>
                    }
                </div>
            }
            else
            {
                <div>
                    SolutionStateWrap is null
                </div>
            }
        </DebugExpansion>

    <DebugExpansion Title="FileHandle">
        @if (PlainTextEditor.FileHandle is not null)
        {
            <div>
                @NullSafeToMarkupString(nameof(PlainTextEditor.FileHandle.PhysicalCharacterLengthOfLongestRow), PlainTextEditor.FileHandle.PhysicalCharacterLengthOfLongestRow)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(PlainTextEditor.FileHandle.Edit) + ".Count", PlainTextEditor.FileHandle.Edit.Count)
            </div>

            <DebugExpansion Title="@nameof(PlainTextEditor.FileHandle.VirtualCharacterIndexMarkerForStartOfARow)">
                <div style="max-height: 250px; overflow-y: auto;">
                    @for (var index = 0; index < PlainTextEditor.FileHandle.VirtualCharacterIndexMarkerForStartOfARow.Count; index++)
                    {
                        var indexMarker = PlainTextEditor.FileHandle.VirtualCharacterIndexMarkerForStartOfARow[index];

                        <div>
                            index: @index, value: @indexMarker
                        </div>
                    }
                </div>
            </DebugExpansion>


            <div>
                PhysicalCharacterLengthOfLongestRow:&nbsp;@PlainTextEditor.FileHandle.PhysicalCharacterLengthOfLongestRow
            </div>
        }
        else
        {
            <div>
                FileHandle is null
            </div>
        }
    </DebugExpansion>

    <DebugExpansion Title="FileHandleReadRequest">
        @if (PlainTextEditor.FileHandleReadRequest is not null)
        {
            <div>
                RowIndexOffset:&nbsp;@PlainTextEditor.FileHandleReadRequest.RowIndexOffset
            </div>
            <div>
                CharacterIndexOffset:&nbsp;@PlainTextEditor.FileHandleReadRequest.CharacterIndexOffset
            </div>
            <div>
                RowCount:&nbsp;@PlainTextEditor.FileHandleReadRequest.RowCount
            </div>
            <div>
                CharacterCount:&nbsp;@PlainTextEditor.FileHandleReadRequest.CharacterCount
            </div>
        }
        else
        {
            <div>
                FileHandleReadRequest is null
            </div>
        }
    </DebugExpansion>

    <DebugExpansion Title="VirtualizeCoordinateSystemMessage">
        @if (PlainTextEditor.VirtualizeCoordinateSystemMessage is not null)
        {
            var request = PlainTextEditor.VirtualizeCoordinateSystemMessage.VirtualizeCoordinateSystemRequest;
            var result = PlainTextEditor.VirtualizeCoordinateSystemMessage.VirtualizeCoordinateSystemResult;

            var itemsEnumerated = result?.ItemsUntyped.ToArray();

            <div>
                Virtual&nbsp;Enumerable&nbsp;@NullSafeToMarkupString(nameof(itemsEnumerated.Length), itemsEnumerated?.Length)
            </div>

            <div>
                @NullSafeToMarkupString(nameof(request.ScrollLeftInPixels), request?.ScrollLeftInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(request.ScrollTopInPixels), request?.ScrollTopInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(request.ScrollWidthInPixels), request?.ScrollWidthInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(request.ScrollHeightInPixels), request?.ScrollHeightInPixels)
            </div>

            <div>
                @NullSafeToMarkupString(nameof(request.ViewportWidthInPixels), request?.ViewportWidthInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(request.ViewportHeightInPixels), request?.ViewportHeightInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(result.WidthOfResultInPixels), result?.WidthOfResultInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(result.HeightOfResultInPixels), result?.HeightOfResultInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(result.TotalWidthInPixels), result?.TotalWidthInPixels)
            </div>
            <div>
                @NullSafeToMarkupString(nameof(result.TotalHeightInPixels), result?.TotalHeightInPixels)
            </div>
        }
        else
        {
            <div>virtualization message was null</div>
        }
    </DebugExpansion>
</div>