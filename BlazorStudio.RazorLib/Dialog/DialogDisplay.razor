@using BlazorStudio.ClassLib.Contexts

<ContextBoundary ContextKey="ContextFacts.DialogDisplayContext.ContextKey"
                 OnFocusIn="HandleOnFocusInAsync"
                 CssClassString="bstudio_dialog-display bstudio_focus-display-large"
                 CssStyleString="@CssStyleString"
                 @ref="_contextBoundary">
    @if (DialogRecord.IsTransformable)
    {
        <BlazorStudio.RazorLib.Transformable.TransformableDisplay @ref="_transformableDisplay"
                                                                  Dimensions="DialogRecord.Dimensions"
                                                                  ReRenderFunc="ReRender"/>
    }

    <div class="bstudio_dialog-display-tool-bar"
         @onmousedown="FireSubscribeToDragEventWithMoveHandle">
        <div class="bstudio_dialog-display-tool-bar-entry bstudio_dialog-display-tool-bar-title">
            @DialogRecord.Title
        </div>

        <div class="bstudio_dialog-display-tool-bar-entry bstudio_dialog-display-tool-bar-control-buttons">
            <div class="bstudio_dialog-display-tool-bar-control-buttons-item"
                 @onmousedown:stopPropagation="true"
                 @onclick="MinimizeOnClick">

                <IconMinimize/>
            </div>

            <div class="bstudio_dialog-display-tool-bar-control-buttons-item"
                 @onmousedown:stopPropagation="true"
                 @onclick="MaximizeOnClick">

                <IconMaximize/>
            </div>

            <div class="bstudio_dialog-display-tool-bar-control-buttons-item"
                 @onmousedown:stopPropagation="true"
                 @onclick="CloseOnClick">

                <IconClose/>
            </div>
        </div>
    </div>

    <div class="bstudio_dialog-display-body">
        <ShouldRenderBoundary ShouldRenderFunc="(_) => false">
            <CascadingValue Value="DialogRecord">
                <DynamicComponent Type="DialogRecord.Type"
                                  Parameters="DialogRecord.Parameters ?? new Dictionary<string, object?>()"/>
            </CascadingValue>
        </ShouldRenderBoundary>
    </div>
</ContextBoundary>