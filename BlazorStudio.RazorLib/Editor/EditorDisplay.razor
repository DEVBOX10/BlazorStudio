@using BlazorStudio.ClassLib.Context
@using BlazorStudio.ClassLib.Store.EditorCase
@using BlazorStudio.RazorLib.ContextCase
@using BlazorTextEditor.RazorLib
@using BlazorTextEditor.RazorLib.TextEditor
@using BlazorTextEditor.RazorLib.HelperComponents

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<ContextBoundary ContextRecord="ContextFacts.EditorContext"
                 ClassCssString="bstudio_editor-display"
                 StyleCssString="@EditorElementDimensions.StyleString">

    <div class="bstudio_section-title">
        Editor
    </div>

    <div class="bstudio_section-body">
        @{
            var editorState = EditorStateWrap.Value;
            var textEditorResourceMapState = TextEditorResourceMapStateWrap.Value;

            var textEditorList = TextEditorService.TextEditorStates.TextEditorList;
            
            var activeTextEditor = textEditorList
                .FirstOrDefault(x =>
                    x.Key == editorState.ActiveTextEditorKey);

            <EditorTabsDisplay @ref="_editorTabsDisplay" 
                               TextEditorList="textEditorList" />
            
            if (activeTextEditor is not null)
            {
                _ = textEditorResourceMapState.ResourceMap
                    .TryGetValue(
                        activeTextEditor.Key, 
                        out var resource);

                <TextEditorDisplay @ref="_textEditorDisplay"
                                   TextEditorKey="activeTextEditor.Key"
                                   TabIndex="0"
                                   ClassCssString="bstudio_text-editor-display"
                                   AfterOnKeyDownAsync="HandleAfterOnKeyDownAsync"
                                   OnSaveRequested="HandleOnSaveRequested">
                    
                    <OnContextMenuRenderFragment>
                        <EditorContextMenu TextEditor="activeTextEditor"
                                           TextEditorDisplay="_textEditorDisplay"/>
                    </OnContextMenuRenderFragment>
                </TextEditorDisplay>
                
                <TextEditorFooter TextEditor="activeTextEditor"
                                  TextEditorDisplay="_textEditorDisplay"
                                  Extension="@(resource?.ExtensionNoPeriod ?? "null")"/>
            }
            else
            {
                <ButtonDisplay OnClickFunc="async () => await EditorState.ShowInputFileAsync(Dispatcher, TextEditorService, textEditorResourceMapState)">
                    Open File
                </ButtonDisplay>
            }
        }
    </div>
</ContextBoundary>